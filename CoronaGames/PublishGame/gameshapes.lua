-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--            local scaleFactor = 1.0
--            local physicsData = (require "shapedefs").physicsData(scaleFactor)
--            local shape = display.newImage("objectname.png")
--            physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
    local physics = { data =
    { 
        
        ["ball"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0.9, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   7, -25  ,  22, -14  ,  25, -7  ,  22, 14  ,  -25, 7  ,  -25, -7  ,  -19, -18  ,  -7, -25  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0.9, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   -17, 20  ,  -22, 14  ,  -25, 7  ,  22, 14  ,  17, 20  ,  8, 25  ,  -8, 25  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0.9, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   22, -14  ,  7, -25  ,  14, -22  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0.9, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   22, 14  ,  25, -7  ,  25, 7  }
                    }
                    
                    
                    
        }
        
        , 
        ["wall_left"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 2, maskBits = 5, groupIndex = 0 },
                    shape = {   -25, 240  ,  -25, -240  ,  25, -240  ,  25, 240  }
                    }
                    
                    
                    
        }
        
        , 
        ["wall_right"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 2, maskBits = 5, groupIndex = 0 },
                    shape = {   -25, 240  ,  -25, -240  ,  25, -240  ,  25, 240  }
                    }
                    
                    
                    
        }
        
        , 
        ["wall_top"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 2, maskBits = 5, groupIndex = 0 },
                    shape = {   -110, -22  ,  110, -22  ,  110, 22  ,  -110, 22  }
                    }
                    
                    
                    
        }
        
        , 
        ["wall_bottom"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 2, maskBits = 5, groupIndex = 0 },
                    shape = {   -110, -22  ,  110, -22  ,  110, 22  ,  -110, 22  }
                    }
                    
                    
                    
        }
        
        , 
        ["crate1"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 4, maskBits = 7, groupIndex = 0 },
                    shape = {   -25, 25  ,  -25, -25  ,  25, -25  ,  25, 25  }
                    }
                    
                    
                    
        }
        
        , 
        ["crate2"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 4, maskBits = 7, groupIndex = 0 },
                    shape = {   -25, 25  ,  -25, -25  ,  25, -25  ,  25, 25  }
                    }
                    
                    
                    
        }
        
        , 
        ["crate3"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 2, friction = 0, bounce = 0, 
                    filter = { categoryBits = 4, maskBits = 7, groupIndex = 0 },
                    shape = {   -25, 25  ,  -25, -25  ,  25, -25  ,  25, 25  }
                    }
                    
                    
                    
        }
        
    } }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
    
    function physics:get(name)
        return unpack(self.data[name])
    end

    function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
    end
    
    return physics;
end

return M

